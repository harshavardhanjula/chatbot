import socket from './socket.js';

// Message queue for batching
let messageQueue = [];
let isProcessingQueue = false;
const MESSAGE_BATCH_DELAY = 50; // ms

// Process message queue
async function processMessageQueue() {
    if (isProcessingQueue || messageQueue.length === 0) return;
    
    isProcessingQueue = true;
    const messagesToProcess = [...messageQueue];
    messageQueue = [];
    
    try {
        // Process messages in a single batch
        messagesToProcess.forEach(({ message, isAgent }) => {
            addMessage(message, isAgent);
        });
        
        // Scroll to bottom after batch update
        requestAnimationFrame(() => {
            scrollToBottom();
        });
    } finally {
        isProcessingQueue = false;
        
        // Process any new messages that arrived while we were processing
        if (messageQueue.length > 0) {
            setTimeout(processMessageQueue, MESSAGE_BATCH_DELAY);
        }
    }
}

// Queue a message for processing
function queueMessage(message, isAgent) {
    messageQueue.push({ message, isAgent });
    
    // Process queue after a short delay to allow batching
    if (!isProcessingQueue) {
        setTimeout(processMessageQueue, MESSAGE_BATCH_DELAY);
    }
}

document.addEventListener('DOMContentLoaded', () => {
    // Get all required DOM elements
    const loginSection = document.getElementById('login-section');
    const dashboardSection = document.getElementById('dashboard-section');
    const loginForm = document.getElementById('agentLoginForm');
    const loginError = document.getElementById('loginError');
    const logoutBtn = document.getElementById('logoutBtn');
    const showPasswordCheckbox = document.getElementById('showPassword');
    const passwordInput = document.getElementById('password');
    const agentName = document.getElementById('agentName');
    const pendingRequests = document.getElementById('pendingRequests');
    const agentChatMessages = document.getElementById('agentChatMessages');
    const agentInput = document.getElementById('agentInput');
    const agentSendBtn = document.getElementById('agentSendBtn');
    const currentChatUser = document.getElementById('currentChatUser');
    const agentExitBtn = document.getElementById('agentExitBtn');
    const loginWrapper = document.getElementById('agentLoginWrapper');

    // Store agent's socket ID and chat state
    let agentSocketId = null;
    let currentChatId = null;
    let currentUserId = null;

    // Connection status logging
    socket.on('connect', () => {
        console.log('✅ Agent WebSocket Connected! Socket ID:', socket.id);
        agentSocketId = socket.id;
        if (agentName) {
        agentName.textContent = `Agent Online (ID: ${socket.id})`;
        }
    });

    socket.on('disconnect', () => {
        console.log('❌ Agent WebSocket Disconnected!');
        if (agentName) {
        agentName.textContent = 'Agent Offline - Reconnecting...';
        }
    });

    socket.on('connect_error', (error) => {
        console.error('Agent WebSocket Connection Error:', error.message);
        if (agentName) {
        agentName.textContent = `Connection Error: ${error.message}`;
        }
    });

    // Check if agent is already logged in
    const agentToken = getCookie('agentToken');
    if (agentToken) {
        showDashboard();
    } else {
        showLogin();
    }
    
    // Cookie utility functions
    function setCookie(name, value, days) {
        let expires = '';
        if (days) {
            const date = new Date();
            date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
            expires = '; expires=' + date.toUTCString();
        }
        document.cookie = name + '=' + (value || '') + expires + '; path=/; SameSite=Strict';
    }
    
    function getCookie(name) {
        const nameEQ = name + '=';
        const ca = document.cookie.split(';');
        for (let i = 0; i < ca.length; i++) {
            let c = ca[i];
            while (c.charAt(0) === ' ') c = c.substring(1, c.length);
            if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
        }
        return null;
    }
    
    function deleteCookie(name) {
        document.cookie = name + '=; Max-Age=-99999999; path=/; SameSite=Strict';
    }

    // Function to add a request to the pending list
    function addRequest(request) {
        const requestDiv = document.createElement('div');
        requestDiv.className = 'request-card';
        // Format the date
        let timeString = 'Unknown time';
        if (request.timestamp) {
            try {
                const date = new Date(request.timestamp);
                timeString = date.toLocaleString();
            } catch (e) {}
        }
        requestDiv.innerHTML = `
            <div style="margin-bottom: 8px;">
                <strong style="color: #333;">${request.name || 'Unknown'}</strong>
                <span style="color: #666; margin-left: 10px;">${timeString}</span>
            </div>
            <div style="margin: 4px 0; color: #333;">${request.query || 'No query provided'}</div>
            <button class="join-chat-btn" style="margin-top: 8px; padding: 8px 16px; background: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer;">Join Chat</button>
        `;
        // Join Chat button handler
        requestDiv.querySelector('.join-chat-btn').addEventListener('click', async () => {
            try {
                console.log('Join Chat clicked for request:', request.id);
                console.log('Full request object:', request);
                
                if (!request.id) {
                    console.error('No request.id found!');
                    return;
                }
                
                // Store the current chat ID and user ID
                currentChatId = request.id;
                currentUserId = request.userId || `user_${Date.now()}`;
                
                console.log('Current chat info:', {
                    chatId: currentChatId,
                    userId: currentUserId,
                    socketId: socket.id
                });
                
                // Update UI to show active chat
                currentChatUser.textContent = `User: ${request.name || 'Unknown'}`;
                document.getElementById('liveChatArea').style.display = 'flex';
                document.getElementById('noActiveChat').style.display = 'none';
                
                // Clear previous messages
                agentChatMessages.innerHTML = '';
                
                // Notify server that agent is joining the chat
                socket.emit('join_chat', {
                    requestId: request.id,
                    userId: currentUserId,
                    socketId: socket.id
                });
                
                // Update request status to active
                console.log('Updating request status to active for:', request.id);
                const response = await fetch(`/api/requests/${request.id}/status`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ 
                        status: 'active',
                        agentId: socket.id,
                        agentName: getCookie('agentName') || 'Agent'
                    })
                });
                
                if (!response.ok) {
                    throw new Error('Failed to update request status');
                }
                
                const result = await response.json();
                console.log('Request status updated:', result);
                
                // Remove the request from the pending list
                requestDiv.remove();
                
                // Add system message
                addSystemMessage(`You are now chatting with ${request.name || 'the user'}`);
                
            } catch (error) {
                console.error('Error joining chat:', error);
                alert('Failed to join chat. Please try again.');
            }
        });
        pendingRequests.appendChild(requestDiv);
    }

    // Function to add message to chat
    function addMessage(message, isAgent = true) {
        const messageDiv = document.createElement('div');
        messageDiv.className = 'message-container';  // Add container for consistent layout
        
        const messageContent = document.createElement('div');
        // Add class for alignment
        if (isAgent) {
            messageContent.className = 'message agent';
            messageContent.style.alignSelf = 'flex-start';
            messageContent.style.background = '#e3f2fd';
            messageContent.style.color = '#1976d2';
        } else {
            messageContent.className = 'message user';
            messageContent.style.alignSelf = 'flex-end';
            messageContent.style.background = '#ede7f6';
            messageContent.style.color = '#5a4fff';
        }
        
        // Consistent styling for all messages
        messageContent.style.padding = '8px 14px';
        messageContent.style.borderRadius = '16px';
        messageContent.style.marginBottom = '8px';
        messageContent.style.maxWidth = '70%';
        messageContent.style.wordWrap = 'break-word';
        messageContent.style.display = 'inline-block';
        messageContent.textContent = message;

        // Add timestamp
        const timestamp = document.createElement('div');
        timestamp.className = 'message-timestamp';
        timestamp.style.fontSize = '0.75em';
        timestamp.style.color = '#888';
        timestamp.style.marginTop = '4px';
        timestamp.textContent = new Date().toLocaleTimeString();

        messageContent.appendChild(timestamp);
        messageDiv.appendChild(messageContent);
        agentChatMessages.appendChild(messageDiv);
        
        // Scroll to bottom after adding message
        scrollToBottom();
    }

    // Function to scroll chat to bottom
    function scrollToBottom() {
        if (agentChatMessages) {
        agentChatMessages.scrollTop = agentChatMessages.scrollHeight;
        }
    }

    // Remove or comment out WebSocket handlers that add requests dynamically
    // socket.on('pending_requests', (requests) => {
    //     requests.forEach(request => addRequest(request));
    // });

    // socket.on('new_request', (request) => {
    //     addRequest(request);
    // });

    // Listen for incoming messages with optimized handling
    socket.on('receive_message', (data) => {
        console.log('Received message:', data);
        // Only process if this message is for the current chat
        if (!data.chatId || data.chatId === currentChatId) {
            queueMessage(data.message, data.senderId !== socket.id);
        }
    });
    
    // Track last message timestamp for rate limiting
    let lastMessageTime = 0;
    const MESSAGE_RATE_LIMIT = 1000; // 1 second between messages
    
    // Handle sending messages with optimizations
    async function sendMessage() {
        const message = agentInput.value.trim();
        
        if (!message) return;
        
        // Rate limiting
        const now = Date.now();
        if (now - lastMessageTime < MESSAGE_RATE_LIMIT) {
            console.warn('Message rate limit exceeded');
            return;
        }
        lastMessageTime = now;
        
        if (!currentChatId) {
            console.error('Cannot send message: No active chat');
            queueMessage('Error: No active chat. Please join a chat first.', false);
            return;
        }
        
        if (!currentUserId) {
            console.error('Cannot send message: No recipient user ID');
            queueMessage('Error: Cannot determine message recipient. Please refresh and try again.', false);
            return;
        }
        
        // Show message in UI immediately for better UX
        queueMessage(message, true);
        
        // Clear input early for better UX
        agentInput.value = '';
        
        const messageData = {
            message,
            recipientId: currentUserId,
            senderId: socket.id,
            chatId: currentChatId,
            type: 'text',
            timestamp: new Date().toISOString()
        };
        
        try {
            // Send message with acknowledgment
            const ack = await new Promise((resolve) => {
                socket.emit('send_message', messageData, (response) => {
                    resolve(response || { status: 'error', error: 'No response from server' });
                });
                
                // Timeout if no response from server
                setTimeout(() => resolve({ status: 'timeout', error: 'Server response timeout' }), 5000);
            });
            
            if (ack.status !== 'delivered') {
                console.error('Failed to send message:', ack.error || 'Unknown error');
                queueMessage('Failed to send message. Please try again.', false);
            }
        } catch (error) {
            console.error('Error sending message:', error);
            queueMessage('Error sending message. Please try again.', false);
        }
    }
    
    // Set up send button event listener if it exists
    if (agentSendBtn) {
        agentSendBtn.addEventListener('click', sendMessage);
    }

    socket.on('request_accepted', (data) => {
        currentChatId = data.chatId;
        addMessage(`Chat session started with user ${currentUserId}`);
    });

    socket.on('chat_history', (data) => {
        console.log('Received chat history:', data);  // Debug log
        agentChatMessages.innerHTML = '';
        const messages = Array.isArray(data) ? data : data.messages;
        if (messages) {
        messages.forEach(msg => {
            addMessage(msg.message, msg.senderId === socket.id);
        });
        }
        // Set currentUserId from the userSocketId in the data
        if (data.userSocketId) {
            currentUserId = data.userSocketId;
            console.log('Set currentUserId to:', currentUserId);  // Debug log
        } else {
            console.warn('No userSocketId received in chat history. This may prevent sending messages.');
    // Send message on Enter key (with Shift+Enter for new line)
    if (agentInput) {
        agentInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });
    }

    // Typing indicator logic for agent with debounce
    let typingTimeout;
    const TYPING_DEBOUNCE_TIME = 1000; // 1 second
    
    agentInput.addEventListener('input', () => {
        if (!currentChatId) return;
        
        // Clear any existing timeout
        clearTimeout(typingTimeout);
        
        // Only emit typing if we haven't already recently
        if (!socket.typing) {
            socket.emit('typing', { chatId: currentChatId, user: 'agent' });
            socket.typing = true;
        }
        
        // Set a timeout to reset the typing flag
        typingTimeout = setTimeout(() => {
            socket.typing = false;
        }, TYPING_DEBOUNCE_TIME);
    });
    
    // Handle window unload
    window.addEventListener('beforeunload', () => {
        // Clean up any pending messages
        messageQueue = [];
        // Notify server that agent is going offline
        socket.emit('agent_disconnecting');
    });

    socket.on('typing', (data) => {
        showTypingIndicator(data.user === 'user' ? 'User is typing...' : 'Agent is typing...');
    });

    function showTypingIndicator(message) {
        let indicator = document.getElementById('typingIndicator');
        if (!indicator) {
            indicator = document.createElement('div');
            indicator.id = 'typingIndicator';
            indicator.className = 'message bot typing-indicator';
            agentChatMessages.appendChild(indicator);
        }
        indicator.textContent = message;
        clearTimeout(window.typingTimeout);
        window.typingTimeout = setTimeout(() => {
            if (indicator) indicator.remove();
        }, 2000);
    }

    // Fetch requests from backend and display them
    function fetchRequests() {
        fetch('http://localhost:5000/api/requests')
            .then(res => res.json())
            .then(requests => {
                pendingRequests.innerHTML = '';
                requests.forEach(addRequest);
            })
            .catch(error => {
                console.error('Error fetching requests:', error);
                pendingRequests.innerHTML = '<div style="color:red;">Failed to fetch requests</div>';
            });
    }

    // Fetch resolved requests and display them
    function fetchResolvedRequests() {
        const resolvedRequestsDiv = document.getElementById('resolvedRequests');
        if (!resolvedRequestsDiv) return;
        fetch('http://localhost:5000/api/resolved-requests')
            .then(res => res.json())
            .then(requests => {
                resolvedRequestsDiv.innerHTML = '';
                if (requests.length === 0) {
                    resolvedRequestsDiv.innerHTML = '<div style="color:#888;">No resolved requests.</div>';
                    return;
                }
                requests.forEach(request => {
                    const div = document.createElement('div');
                    div.className = 'request-card';
                    let timeString = 'Unknown time';
                    if (request.timestamp) {
                        try {
                            const date = new Date(request.timestamp);
                            timeString = date.toLocaleString();
                        } catch (e) {}
                    }
                    div.innerHTML = `
                        <div><strong>${request.name || 'Unknown'}</strong></div>
                        <div style="margin: 4px 0; color: #333;">${request.query || 'No query provided'}</div>
                        <div style="font-size: 0.9em; color: #888;">${timeString}</div>
                    `;
                    resolvedRequestsDiv.appendChild(div);
                });
            })
            .catch(error => {
                console.error('Error fetching resolved requests:', error);
                resolvedRequestsDiv.innerHTML = '<div style="color:red;">Failed to fetch resolved requests</div>';
            });
    }

    // Fetch requests on page load
    fetchRequests();
    fetchResolvedRequests();

    // Add CSS styles to the document
    const style = document.createElement('style');
    style.textContent = `
        .message-container {
            display: flex;
            margin: 8px 0;
            width: 100%;
        }
        .message-container .agent {
            margin-right: auto;
        }
        .message-container .user {
            margin-left: auto;
        }
        .message {
            position: relative;
            padding: 8px 14px;
            border-radius: 16px;
            max-width: 70%;
            word-wrap: break-word;
        }
        .message-timestamp {
            font-size: 0.75em;
            color: #888;
            margin-top: 4px;
            text-align: right;
        }
        #agentChatMessages {
            height: calc(100vh - 200px);
            overflow-y: auto;
            padding: 20px;
            display: flex;
            flex-direction: column;
        }
        #dashboard-section {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px;
            background-color: #f5f5f5;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }
        #pendingRequests {
            width: 100%;
            max-width: 600px;
            margin-top: 20px;
        }
        .request-card {
            background-color: white;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 10px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }
        .join-chat-btn {
            background-color: #4CAF50;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        .join-chat-btn:hover {
            background-color: #45a049;
        }
        #endChatBtn {
            background-color: #f44336;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        #endChatBtn:hover {
            background-color: #d32f2f;
        }
    `;
    document.head.appendChild(style);

    // Add End Chat button to liveChatArea
    const endChatBtn = document.createElement('button');
    endChatBtn.id = 'endChatBtn';
    endChatBtn.textContent = 'End Chat';
    endChatBtn.style.marginTop = '10px';
    document.getElementById('liveChatArea').appendChild(endChatBtn);

    // Add event listener for End Chat button
    endChatBtn.addEventListener('click', async () => {
        if (!currentChatId) {
            alert('No active chat to end.');
                    return;
                }
        endChatBtn.disabled = true;
        try {
            // Get agent name from localStorage or fallback
            const agentName = localStorage.getItem('agentName') || localStorage.getItem('agentId') || 'Unknown Agent';
            // Update request status to resolved and include agent name
            const response = await fetch(`http://localhost:5000/api/requests/${currentChatId}/status`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ status: 'resolved', agentName })
            });
            const data = await response.json();
            if (response.ok) {
                console.log('Request marked as resolved:', data);
            agentChatMessages.innerHTML = '';
            currentChatUser.textContent = '';
                // Optionally emit a socket event
            socket.emit('agent_exit_chat', {
                chatId: currentChatId,
                userSocketId: currentUserId,
                    resolved: true
            });
            currentChatId = null;
            currentUserId = null;
                document.getElementById('liveChatArea').style.display = 'none';
                document.getElementById('noActiveChat').style.display = 'block';
                // Refresh both pending and resolved requests
                fetchRequests();
                fetchResolvedRequests();
            } else {
                alert(data.message || 'Failed to resolve chat.');
            }
        } catch (error) {
            console.error('Error marking request as resolved:', error);
            alert('Error ending chat.');
        }
        endChatBtn.disabled = false;
        });

    // Show/hide password
    if (showPasswordCheckbox && passwordInput) {
        showPasswordCheckbox.addEventListener('change', () => {
            passwordInput.type = showPasswordCheckbox.checked ? 'text' : 'password';
        });
    }

    // Login form submission
    if (loginForm) {
        loginForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const username = document.getElementById('username').value.trim();
            const password = document.getElementById('password').value;
            const loginButton = loginForm.querySelector('button[type="submit"]');
            const originalButtonText = loginButton.textContent;
            
            try {
                // Disable button and show loading state
                loginButton.disabled = true;
                loginButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Logging in...';
                
                if (loginError) {
                    loginError.style.display = 'none';
                }
                
                // Use the agent login endpoint
                const response = await fetch('http://localhost:5000/api/agent/login', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ 
                        username: username,
                        password: password
                    })
                });
                
                let data;
                try {
                    data = await response.json();
                    console.log('Login response:', data); // Debug log
                } catch (jsonError) {
                    console.error('Failed to parse JSON response:', jsonError);
                    throw new Error('Invalid response format from server');
                }
                
                if (!response.ok) {
                    console.error('Login failed:', data); // Debug log
                    throw new Error(data.error || data.message || 'Login failed. Please check your credentials.');
                }
                
                // Store the authentication token and user data in cookies
                if (data && data.token) {
                    const userData = data.user || {};
                    console.log('Login successful, user data:', userData); // Debug log
                    
                    setCookie('agentToken', data.token, 1);
                    setCookie('agentId', userData._id || 'agent', 1);
                    setCookie('agentName', userData.name || userData.username || 'Agent', 1);
                    setCookie('agentEmail', userData.email || '', 1);
                    
                    // Update UI to show logged-in state
                    const agentNameElement = document.getElementById('agent-name');
                    if (agentNameElement) {
                        agentNameElement.textContent = userData.name || userData.username || 'Agent';
                    }
                    
                    showDashboard();
                } else {
                    console.error('Invalid response data:', data); // Debug log
                    throw new Error('Invalid response from server. Missing token or user data.');
                }
            } catch (error) {
                console.error('Login error:', error);
                if (loginError) {
                    loginError.textContent = error.message || 'Login failed. Please try again.';
                    loginError.style.display = 'block';
                }
                // Clean up on error
                deleteCookie('agentToken');
                deleteCookie('agentId');
                deleteCookie('agentName');
                deleteCookie('agentEmail');
                showLogin();
            } finally {
                // Re-enable button and restore text
                if (loginButton) {
                    loginButton.disabled = false;
                    loginButton.textContent = originalButtonText;
                }
            }
        });
    }

    function showLogin() {
        if (loginSection) {
            loginSection.style.display = 'block';
        }
        if (dashboardSection) {
            dashboardSection.style.display = 'none';
        }
    }

    function showDashboard() {
        if (loginSection) {
            loginSection.style.display = 'none';
                }
        if (dashboardSection) {
            dashboardSection.style.display = 'block';
        }
        initializeDashboard();
    }

    function initializeDashboard() {
        const agentId = getCookie('agentId');
        if (!agentId) {
            showLogin();
            return;
        }

        // Connect to socket with agent ID
        socket.emit('agent_connect', {
            agentId: agentId,
            timestamp: new Date()
        });

        // Listen for new chat requests
        socket.on('new_chat_request', (data) => {
            if (pendingRequests) {
                addChatToList(data);
            }
        });

        // Listen for chat updates
        socket.on('chat_update', (data) => {
            updateChatInList(data);
        });
    }

    function addChatToList(chat) {
        if (!pendingRequests) return;

        const chatItem = document.createElement('div');
        chatItem.className = 'chat-item';
        chatItem.dataset.chatId = chat.chatId;
        chatItem.innerHTML = `
            <div class="chat-user">${chat.userName || 'Unknown User'}</div>
            <div class="chat-preview">${chat.lastMessage || 'New chat'}</div>
        `;
        chatItem.addEventListener('click', () => selectChat(chat.chatId));
        pendingRequests.appendChild(chatItem);
    }

    function updateChatInList(chat) {
        const chatItem = document.querySelector(`.chat-item[data-chat-id="${chat.chatId}"]`);
        if (chatItem) {
            const preview = chatItem.querySelector('.chat-preview');
            if (preview) {
                preview.textContent = chat.lastMessage || 'New message';
            }
        }
    }

    function selectChat(chatId) {
        // Remove active class from all chats
        document.querySelectorAll('.chat-item').forEach(item => {
            item.classList.remove('active');
        });

        // Add active class to selected chat
        const selectedChat = document.querySelector(`.chat-item[data-chat-id="${chatId}"]`);
        if (selectedChat) {
            selectedChat.classList.add('active');
        }

        // Update current chat ID
        currentChatId = chatId;

        // Load chat messages
        loadChatMessages(chatId);
    }

    function loadChatMessages(chatId) {
        if (!agentChatMessages) return;

        // Clear existing messages
        agentChatMessages.innerHTML = '';

        // Fetch chat history
        fetch(`http://localhost:5000/api/chats/${chatId}/messages`)
            .then(response => response.json())
            .then(data => {
                if (data.messages) {
                    data.messages.forEach(msg => {
                        addMessage(msg.content, msg.sender === 'agent');
                    });
                    // Scroll to bottom after loading messages
                    scrollToBottom();
                }
            })
            .catch(error => {
                console.error('Error loading chat messages:', error);
                if (agentChatMessages) {
                    agentChatMessages.innerHTML = '<div class="error">Failed to load messages</div>';
                }
            });
    }

    // Initialize the dashboard when the page loads
    initializeDashboard();
}); // End of DOMContentLoaded

// Add any additional global functions or exports here if needed